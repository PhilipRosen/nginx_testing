# /etc/nginx/sites-available/node_load_balancer.conf
# (or relevant path for your Nginx setup)

# 1. Define the group of backend application servers
upstream node_app_backend {
    # Least Connections balancing could also be used:
    # least_conn;

    # List the servers Node.js/Express are running on.
    # Nginx will distribute requests across these servers.
    server 127.0.0.1:3000; # Your first Express server
    server 127.0.0.1:3001; # Your second Express server

    # Optional: Add weights or other parameters if needed
    # server 127.0.0.1:3000 weight=3;
    # server 127.0.0.1:3001;

    # Optional: Mark a server as backup
    # server 127.0.0.1:3002 backup;

    # Optional: Mark a server as down for maintenance
    # server 127.0.0.1:3001 down;
}

# 2. Define the public-facing server block
server {
    # Port Nginx listens on. Use 80 for standard HTTP,
    # but 8080 is used here as an example that doesn't
    # typically require root/administrator privileges.
    listen 8080;
    # listen [::]:8080; # Optional: Listen on IPv6 as well

    # The domain name(s) this server block should handle.
    # Use 'localhost' for local testing. Replace with your actual
    # domain name (e.g., example.com www.example.com) for production.
    server_name localhost;

    # Optional: Define access and error logs for this specific server
    # access_log /var/log/nginx/node_app.access.log;
    # error_log /var/log/nginx/node_app.error.log;

    # Location block for handling incoming requests
    location / {
        # Pass requests to the upstream group defined above
        proxy_pass http://node_app_backend;

        # -- Important Proxy Headers --
        # Preserve the original Host header sent by the client
        proxy_set_header Host $host;

        # Pass the client's real IP address to the backend
        proxy_set_header X-Real-IP $remote_addr;

        # Pass a list of IPs, including intermediate proxies
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # Pass the original protocol (http or https)
        proxy_set_header X-Forwarded-Proto $scheme;

        # -- Optional: Proxy Timeouts (adjust if needed) --
        # proxy_connect_timeout 60s;
        # proxy_send_timeout    60s;
        # proxy_read_timeout    60s;

        # -- Optional: WebSocket Support (if your apps use WebSockets) --
        # proxy_http_version 1.1;
        # proxy_set_header Upgrade $http_upgrade;
        # proxy_set_header Connection "upgrade";
    }

    # Optional: Add specific handling for other locations if needed
    # location /api {
    #     # Specific proxy settings for /api routes
    #     proxy_pass http://node_app_backend;
    #     # ... other proxy settings ...
    # }

    # Optional: Serve static files directly from Nginx for better performance
    # location /static/ {
    #    alias /path/to/your/static/files/;
    #    expires 30d; # Cache static files in browser
    #    add_header Cache-Control "public";
    # }
}